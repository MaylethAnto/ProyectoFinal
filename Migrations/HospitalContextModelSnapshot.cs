// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectoFinal.Models;

#nullable disable

namespace ProyectoFinal.Migrations
{
    [DbContext(typeof(HospitalContext))]
    partial class HospitalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.Cita", b =>
                {
                    b.Property<int>("IdCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCita"));

                    b.Property<int>("ConsultaMedicaId")
                        .HasColumnType("int");

                    b.Property<int>("ConsultorioaId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("RecetaMedicaId")
                        .HasColumnType("int");

                    b.Property<int>("consultorioIdConsultorio")
                        .HasColumnType("int");

                    b.Property<int>("estado_cita")
                        .HasColumnType("int");

                    b.HasKey("IdCita");

                    b.HasIndex("ConsultaMedicaId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("RecetaMedicaId");

                    b.HasIndex("consultorioIdConsultorio");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.ConsultaMedica", b =>
                {
                    b.Property<int>("IdConsulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsulta"));

                    b.Property<string>("diagnostico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fecha_examen")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("precio")
                        .HasColumnType("decimal (18,2)");

                    b.Property<string>("resultado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("serviciosmedicosIdServicio")
                        .HasColumnType("int");

                    b.HasKey("IdConsulta");

                    b.HasIndex("serviciosmedicosIdServicio");

                    b.ToTable("ConsultaMedicas");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.Consultorio", b =>
                {
                    b.Property<int>("IdConsultorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultorio"));

                    b.Property<string>("direccion_consultorio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numero_consultorio")
                        .HasColumnType("int");

                    b.Property<string>("telefono_consultorio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdConsultorio");

                    b.ToTable("Consultorios");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.EspecialidadMedico", b =>
                {
                    b.Property<int>("IdEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEspecialidad"));

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("NombreEspecialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEspecialidad");

                    b.ToTable("especialidadMedicos");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.Horario", b =>
                {
                    b.Property<int>("IdHorario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHorario"));

                    b.Property<int>("citasIdCita")
                        .HasColumnType("int");

                    b.Property<int>("estado_horario")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha_horario")
                        .HasColumnType("datetime2");

                    b.HasKey("IdHorario");

                    b.HasIndex("citasIdCita");

                    b.ToTable("Horarios");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.Medico", b =>
                {
                    b.Property<int>("IdMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedico"));

                    b.Property<int>("CitaIdCita")
                        .HasColumnType("int");

                    b.Property<int>("EspecialidadMedicoIdEspecialidad")
                        .HasColumnType("int");

                    b.Property<string>("correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre_medico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMedico");

                    b.HasIndex("CitaIdCita");

                    b.HasIndex("EspecialidadMedicoIdEspecialidad");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaciente"));

                    b.Property<string>("apellido_paciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("correo_paciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direccion_paciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("estado_paciente")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha_nacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("nombre_paciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telefono_paciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPaciente");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.RecetaMedica", b =>
                {
                    b.Property<int>("IdReceta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReceta"));

                    b.Property<string>("dosis_medica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdReceta");

                    b.ToTable("RecetaMedicas");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.ServiciosMedicos", b =>
                {
                    b.Property<int>("IdServicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdServicio"));

                    b.Property<string>("descripcion_servicio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("estado_servicio")
                        .HasColumnType("bit");

                    b.Property<string>("tipo_servicio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdServicio");

                    b.ToTable("ServiciosMedicos");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.Cita", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Entidades.ConsultaMedica", "consultaMedica")
                        .WithMany()
                        .HasForeignKey("ConsultaMedicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoFinal.Models.Entidades.Paciente", "paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoFinal.Models.Entidades.RecetaMedica", "recetaMedica")
                        .WithMany()
                        .HasForeignKey("RecetaMedicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoFinal.Models.Entidades.Consultorio", "consultorio")
                        .WithMany()
                        .HasForeignKey("consultorioIdConsultorio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("consultaMedica");

                    b.Navigation("consultorio");

                    b.Navigation("paciente");

                    b.Navigation("recetaMedica");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.ConsultaMedica", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Entidades.ServiciosMedicos", "serviciosmedicos")
                        .WithMany()
                        .HasForeignKey("serviciosmedicosIdServicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("serviciosmedicos");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.Horario", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Entidades.Cita", "citas")
                        .WithMany()
                        .HasForeignKey("citasIdCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("citas");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Entidades.Medico", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Entidades.Cita", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaIdCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoFinal.Models.Entidades.EspecialidadMedico", "EspecialidadMedico")
                        .WithMany()
                        .HasForeignKey("EspecialidadMedicoIdEspecialidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("EspecialidadMedico");
                });
#pragma warning restore 612, 618
        }
    }
}
